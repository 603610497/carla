---
- module_name: carla
  doc: >
  # - CLASSES ------------------------------
  classes:
  - class_name: Timestamp
    # - DESCRIPTION ------------------------
    doc: >
      Class that contains Timestamp simulated data.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: frame
      type: int
      doc: >
        The number of frames elapsed since the simulator was launched.
    - var_name: elapsed_seconds
      type: float
      doc: >
        Simulated seconds elapsed since the beginning of the current episode.
    - var_name: delta_seconds
      type: float
      doc: >
        Simulated seconds elapsed since the previous frame.
    - var_name: platform_timestamp
      type: float
      doc: >
        Time-stamp of the frame at which this measurement was taken, in seconds
        as given by the OS.
    # - METHODS ----------------------------
    methods:
    - def_name: __init__
      params:
      - param_name: frame
        type: int
      - param_name: elapsed_seconds
        type: float
      - param_name: delta_seconds
        type: float
      - param_name: platform_timestamp
        type: float
      doc: >
    # --------------------------------------
    - def_name: __eq__
      params:
      - param_name: other
        type: carla.Timestamp
      doc: >
    # --------------------------------------
    - def_name: __ne__
      params:
      - param_name: other
        type: carla.Timestamp
      doc: >
    # --------------------------------------
    - def_name: __str__
      doc: >
    # --------------------------------------

  - class_name: ActorList
    # - DESCRIPTION ------------------------
    doc: >
      Class that provides access to actors.
    # - METHODS ----------------------------
    methods:
    - def_name: find
      params:
      - param_name: actor_id
        type: int
      doc: >
        Find an actor by ID.
    # --------------------------------------
    - def_name: filter
      params:
      - param_name: wildcard_pattern
        type: str
      doc: >
        Filters a list of Actors with type_id matching wildcard_pattern.
      note: >
         The wildcard_pattern follows Unix shell-style wildcards (fnmatch). 
    # --------------------------------------
    - def_name: __getitem__
      params:
      - param_name: pos
        type: int
      doc: >
    # --------------------------------------
    - def_name: __len__
      doc: >
    # --------------------------------------
    - def_name: __iter__
      doc: >
    # --------------------------------------
    - def_name: __str__
      doc: >
    # --------------------------------------

  - class_name: WorldSettings
    # - DESCRIPTION ------------------------
    doc: >
      The simulation has some advanced configuration options that are contained in this class and can be managed using carla.World and its methods. These allow the user to choose the synchrony/asynchrony between client and server, the activation of a no rendering mode and either if the simulation will run with a fixed or variable time-step. Check [this](../configuring_the_simulation/) out if you want to learn about it. 
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: synchronous_mode
      type: bool
      doc: >
        States the synchrony between client and server. When set to true, both will work together the simulation step by step. It is false by default. 
    - var_name: no_rendering_mode
      type: bool
      doc: >
        When enabled, the simulation will run no rendering at all. This is mainly used to avoid overhead during heavy traffic simulations. It is false by default. 
    - var_name: fixed_delta_seconds
      type: float
      doc: >
        Grants that the time elapsed between two steps of the simulation is fixed. Set this to <b>None</b> to work with a variable time-step, as happens by default.  
    # - METHODS ----------------------------
    methods:
    - def_name: __init__
      params:
      - param_name: synchronous_mode
        type: bool
        doc: >
          Set this to true to enable client-server synchrony. 
      - param_name: no_rendering_mode
        type: bool
        doc: >
          Set this to true to completely disable rendering in the simulation.
      - param_name: fixed_delta_seconds
        type: float
        doc: >
          Set this time in seconds to get a fixed time-step in between frames.
      doc: >
        Create an object containing desired settings that could later be applied through carla.World and its method **<font color="#7fb800">apply_settings()</font>**.
    # --------------------------------------
    - def_name: __eq__
      params:
      - param_name: other
        type: carla.Timestamp
      doc: >
        Compares ........
    # --------------------------------------
    - def_name: __ne__
      params:
      - param_name: other
        type: carla.Timestamp
      doc: >
        Creat......
    # --------------------------------------
    - def_name: __str__
      doc: > 
        Parses the settings established to a string and shows them in command line. 
    # --------------------------------------

  - class_name: AttachmentType
    # - DESCRIPTION ------------------------
    doc: >
      Class that defines the attachment options. See carla.World.spawn_actor.<br>
      Check out this [`recipe`](../python_cookbook/#attach-sensors-recipe)!
      
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: Rigid
      doc: >
        Standard fixed attachment.
    - var_name: SpringArm
      doc: >
        Attachment that expands or retracts based on camera situation.
    # --------------------------------------

  - class_name: World
    # - DESCRIPTION ------------------------
    doc: >
      World objects are created by the client to have a place for the simulation to happen. The world contains the map we can see, meaning the asset, not the navigation map. Navigation maps are part of the carla.Map class. It also manages the weather and actors present in it. There can only be one world per simulation, but it can be changed anytime. 
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: id
      type: int
      doc: >
        The ID of the episode associated with this world. Episodes are different sessions of a simulation. These change everytime a world is disabled or reloaded. Keeping track is useful to avoid possible issues.  
    - var_name: debug
      type: carla.DebugHelper
      doc: >
        This object will help us creating different shapes for debugging. Take a look at its class to learn more about it. 
    # - METHODS ----------------------------
    methods:    
    - def_name: __str__
      return: string
      doc: >
        The content of the world is parsed and printed as a brief report of its current state. 
     # --------------------------------------
    - def_name: apply_settings
      return: int
      params:
      - param_name: world_settings
        type: carla.WorldSettings
      doc: >
        This method applies settings contained in an object to the simulation running and returns the ID of the frame they were implemented. 
    # --------------------------------------
    - def_name: get_actor
      return: carla.Actor
      params:
      - param_name: actor_id
        type: int
      doc: >
        Looks up for an actor by ID and returns <b>None</b> if not found.
    # --------------------------------------
    - def_name: get_actors
      return: carla.ActorList
      params:
      - param_name: actor_ids
        type: list
        default: None
        doc: >
          The IDs of the actors being searched. By default it is set to <b>None</b> and returns every actor on scene. 
      doc: >
        Retrieves a list of carla.Actor elements, either using a list of IDs provided or just listing everyone on stage. If an ID does not correspond with any actor, it will be excluded from the list returned, meaning that both the list of IDs and the list of actors may have different lengths. 
    # --------------------------------------
    - def_name: get_blueprint_library
      return: carla.BlueprintLibrary
      doc: >
        Returns a list of actor blueprints available to ease the spawn of these into the world.
    # --------------------------------------
    - def_name: get_map
      return: carla.Map
      doc: >
        Returns the object containing the navigation map used to describe this world.
    # --------------------------------------
    - def_name: get_random_location_from_navigation
      return: carla.Location
      doc: >
        This can only be used with walkers. It retrieves a random location to be used as a destination using the **<font color="#7fb800">go_to_location()</font>** method in carla.WalkerAIController. This location will be part of a sidewalk. Roads, crosswalks and grass zones are excluded. The method does not take in consideration locations of existing actors so if a collision happens when trying to spawn an actor, it will return an error. Take a look at [`spawn_npc.py`](https://github.com/carla-simulator/carla/blob/e73ad54d182e743b50690ca00f1709b08b16528c/PythonAPI/examples/spawn_npc.py#L179) for an example.
    # --------------------------------------
    - def_name: get_snapshot
      return: carla.WorldSnapshot
      doc: >
        Returns a snapshot of the world at a certain moment comprising all the information about the actors.
    # --------------------------------------
    - def_name: get_spectator
      return: carla.Actor
      doc: >
        Returns the spectator actor. The spectator is a special type of actor created by Unreal Engine, usually with ID=0, that acts as a camera and controls the view in the simulator window.
    # --------------------------------------
    - def_name: get_settings
      return: carla.WorldSettings
      doc: >
        Returns an object containing some data about the simulation such as synchrony between client and server or rendering mode.
    # --------------------------------------
    - def_name: get_weather
      return: carla.WeatherParameters
      doc: >
        Retrieves an object containing weather parameters currently active in the simulation, mainly cloudiness, precipitation, wind and sun position.
    # --------------------------------------
    - def_name: on_tick
      return: int
      params:
      - param_name: callback
        type: carla.WorldSnapshot
        doc: > 
          A defined function with a snapshot as compulsory parameter that will be called every tick.  
      doc: >
        The method will start callbacks for a defined function `callback`. It will return the ID for this callback so it can be removed with **<font color="#7fb800">remove_on_tick()</font>**.
    # --------------------------------------
    - def_name: remove_on_tick
      params:
      - param_name: callback_id
      doc: >
        Stops the callback for `callback_id` started with **<font color="#7fb800">on_tick()</font>**.
    # --------------------------------------
    - def_name: set_weather
      params: 
      - param_name: weather
        type: carla.WeatherParameters
      doc: >
        Changes the weather parameteres ruling the simulation to another ones defined in an object. 
    # --------------------------------------
    - def_name: spawn_actor
      return: carla.Actor
      params:
      - param_name: blueprint
        type: carla.ActorBlueprint
        doc: >
          The reference from which the actor will be created. 
      - param_name: transform
        type: carla.Transform
        doc: >
          Contains the location and orientation the actor will be spawned with. 
      - param_name: attach_to 
        type: carla.Actor
        default: None
        doc: > 
          The parent object that the spawned actor will follow around. 
      - param_name: attachment 
        type: carla.AttachmentType
        default: Rigid
        doc: > 
          Determines how fixed and rigorous should be the changes in position according to its parent object. 
      doc: >
        The method will create, return and spawn an actor into the world. The actor will need an available blueprint to be created and a transform (location and rotation). It can also be attached to a parent with a certain attachment type. 
    # --------------------------------------
    - def_name: tick
      return: int
      doc: >
        This only has effect on synchronous mode, when both client and server move together. The method tells the server when to step to the next frame and returns the id of the newly started frame. 
    # --------------------------------------
    - def_name: try_spawn_actor
      return: carla.Actor
      params:
      - param_name: blueprint
        type: carla.ActorBlueprint
        doc: >
          The reference from which the actor will be created. 
      - param_name: transform
        type: carla.Transform
        doc: >
          Contains the location and orientation the actor will be spawned with. 
      - param_name: attach_to 
        type: carla.Actor
        default: None
        doc: > 
          The parent object that the spawned actor will follow around. 
      - param_name: attachment 
        type: carla.AttachmentType
        default: Rigid
        doc: > 
          Determines how fixed and rigorous should be the changes in position according to its parent object. 
      doc: >
        Same as **<font color="#7fb800">spawn_actor()</font>** but returns <b>None</b> on failure instead of throwing an exception.
    # --------------------------------------
    - def_name: wait_for_tick
      return: carla.WorldSnapshot
      params:
      - param_name: seconds
        type: float
        default: 10.0
        doc: > 
          Maximum time in seconds the server should wait for a tick. It is set to 10.0 by default.   
      doc: >
        The client tells the server to block calling thread until a **<font color="#7fb800">world_tick()</font>** is received.
    # --------------------------------------

  - class_name: DebugHelper
    # - DESCRIPTION ------------------------
    doc: >
      Class that provides drawing debug shapes.
      Check out this [`example`](https://github.com/carla-simulator/carla/blob/master/PythonAPI/util/lane_explorer.py)
    # - METHODS ----------------------------
    methods:
    - def_name: draw_point
      params: 
      - param_name: location
        type: carla.Location
      - param_name: size
        type: float
        default: 0.1f
      - param_name: color
        type: carla.Color
        default: (255,0,0)
      - param_name: life_time
        type: float
        default: -1.0f
      - param_name: persistent_lines
        type: bool
        default: True
        doc: >
          _Deprecated, use `life_time = 0` instead_
      doc: >
        Draws a point in the given location.
    # --------------------------------------
    - def_name: draw_line
      params:
      - param_name: begin
        type: carla.Location
      - param_name: end
        type: carla.Location
      - param_name: thickness
        type: float
        default: 0.1f
      - param_name: color
        type: carla.Color
        default: (255,0,0)
      - param_name: life_time
        type: float
        default: -1.0f
      - param_name: persistent_lines
        type: bool
        default: True
        doc: >
          _Deprecated, use `life_time = 0` instead_
      doc: >
        Draws a line between two given locations.
    # --------------------------------------
    - def_name: draw_arrow
      params:
      - param_name: begin
        type: carla.Location
      - param_name: end
        type: carla.Location
      - param_name: thickness
        type: float
        default: 0.1f
      - param_name: arrow_size
        type: float
        default: 0.1f
      - param_name: color
        type: carla.Color
        default: (255,0,0)
      - param_name: life_time
        type: float
        default: -1.0f
      - param_name: persistent_lines
        type: bool
        default: True
        doc: >
          _Deprecated, use `life_time = 0` instead_
      doc: >
        Draws an arrow between two given locations.

    # --------------------------------------
    - def_name: draw_box
      params:
      - param_name: box
        type: carla.BoundingBox
      - param_name: rotation
        type: carla.Rotation
      - param_name: thickness
        type: float
        default: 0.1f
      - param_name: color
        type: carla.Color
        default: (255,0,0)
      - param_name: life_time
        type: float
        default: -1.0f
      - param_name: persistent_lines
        type: bool
        default: True
        doc: >
          _Deprecated, use `life_time = 0` instead_
      doc: >
        Draws the carla.BoundingBox of a given bounding_box.<br>
        Check out this [`recipe`](../python_cookbook/#debug-bounding-box-recipe)!
        
    # --------------------------------------
    - def_name: draw_string
      params: 
      - param_name: location
        type: carla.Location
      - param_name: text
        type: str
      - param_name: draw_shadow
        type: bool
        default: False
      - param_name: color
        type: carla.Color
        default: (255,0,0)
      - param_name: life_time
        type: float
        default: -1.0f
      - param_name: persistent_lines
        type: bool
        default: true
        doc: >
          _Deprecated, set a high `life_time` instead_
      doc: >
        Draws a string in a given location.
      note: >
        Strings can only be seen on the server-side.
    # --------------------------------------
...
